---
format: 
  html:
    page-layout: full
---

```{r setup, include=FALSE}
# here::i_am("wtm_gb.Rproj")

## Global options
knitr::opts_chunk$set(
  cache = F,
  echo = F,
  warning = F,
  message = F,
  cache.lazy = FALSE
)
```


```{css, echo = F, message=F, warning=F}
.highcharts-container {
  height: 100vh !important;
  width: 100vw !important;
}

        .button-container {
            text-align: center;
            margin-top: 20px;
        }
        
        .show-data-btn {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #007bff; /* Blue shade */
            color: white;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 2px 4px rgba(0, 123, 255, 0.5); /* Add some shadow for depth */
        }

        .show-data-btn:hover, .show-data-btn:focus {
            background-color: #0056b3; /* Darker blue on hover/focus */
            transform: translateY(-2px); /* Slight raise effect */
            box-shadow: 0 4px 6px rgba(0, 123, 255, 0.6); /* Enhanced shadow on hover/focus */
        }

        .show-data-btn:active {
            background-color: #004089; /* Even darker blue on active/click */
            transform: translateY(1px); /* Press down effect */
            box-shadow: 0 2px 3px rgba(0, 123, 255, 0.5); /* Subdued shadow to simulate press */
        }
```

```{r, eval = F}

saveRDS(wtm_labs, "../data/wtm_labs.rds")
wtm_labs %>% 
  select(entities.short_name, entities.name, countries.name) %>% 
  distinct %>% 
  slice(301:n()) %>% 
  dput()
  write_csv("all_entities.csv")
  
  
thelabs <- dir("../data", full.names = T) %>% 
  keep(~str_detect(.x,"Updated")) %>% 
  map_dfr(read_csv) 

thelabs %>% 
  distinct()

more_labs <- enframe(labs) %>% 
  rename(entities.short_name = name, 
         European_Political_Group2 = value) %>% 
  add_count(entities.short_name) %>% 
  filter(n == 1) %>% 
  select(-n)

# more_labs %>% count(entities.short_name, sort = T)
wtm_labs %>% 
  # select(entities.short_name, entities.name, countries.name) %>% 
  left_join(thelabs) %>% 
  left_join(more_labs) %>% 
  mutate(European_Political_Group = ifelse(is.na(European_Political_Group), European_Political_Group2, European_Political_Group)) %>% 
  # count(European_Political_Group, sort =T) %>% 
  # filter(European_Political_Group == "uncertain") %>% 
  select(internal_id, entities.short_name, entities.name, countries.name, European_Political_Group) %>% 
  left_join(election_dat30 %>% distinct(internal_id, .keep_all = T)) %>% 
  group_by(entities.name, countries.name, entities.short_name, European_Political_Group) %>% 
  summarize(spend = sum(dollar_spend, na.rm = T)) %>% 
  ungroup() %>% 
  arrange(desc(spend)) %>% 
  distinct() %>% 
  write_csv("egroupaffil.csv")


wtm_labs %>% 
  # select(entities.short_name, entities.name, countries.name) %>% 
  left_join(thelabs) %>% 
  left_join(more_labs) %>% 
  mutate(European_Political_Group = ifelse(is.na(European_Political_Group), European_Political_Group2, European_Political_Group)) %>% 
  # count(European_Political_Group, sort =T) %>% 
  # filter(European_Political_Group == "uncertain") %>% 
  select(internal_id, entities.short_name, entities.name, countries.name, European_Political_Group) %>% 
  left_join(election_dat30 %>% distinct(internal_id, .keep_all = T)) %>% 
  filter(entities.name == "Investigations") %>% filter(is.na(no_data)) %>% 
  drop_na(total_spend_pct)


```




```{r cars, echo = F, message=F, warning=F}
library(highcharter)
library(tidyverse)
library(reactable)
library(reactablefmtr)
library(rvest)

      
      download_it <- function(link){
        thetemps <- tempfile()
        download.file(link, destfile = thetemps, quiet = T)
        readRDS(thetemps)
      }
    
    # title_txt <- read_lines(here::here("_quarto.yml"))
    # title_txt[which(str_detect(title_txt, "title"))[1]] <- glue::glue("  title: \"Targeting Dashboard\"")
    # # title_txt[which(str_detect(title_txt, "output-dir"))[1]] <- glue::glue("  output-dir: ../docs/{sets$cntry}")
    # # Sys.sleep(1)
    # write_lines(title_txt, here::here("_site/_quarto.yml"))
    
# all_labels_dat <- readRDS("../data/all_labels_dat.rds")
# 
# wtm_labs <- all_labels_dat %>%
#   rename(internal_id = advertisers_platforms.advertiser_platform_ref) %>%
#   filter(entities_groups.group_name != "Group 2") %>%
#   filter(entities_groups.group_name != "Group 3") %>%
#   filter(entities_groups.group_name != "Group 4") %>%
#   arrange(desc(entities_groups.group_name)) %>%
#   distinct(internal_id, .keep_all = T)
# 
# saveRDS(wtm_labs, file = "../wtm_labs.rds")

source("../party_utils.R")
    
        # eu_countries <- c("AT", "BE", "BG", "HR", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HU", "IE", "IT", "LV", "LT", "LU", "MT", "NL", "PL", "PT", "RO", "SK", "SI", "ES", "SE")
# 
if(Sys.info()[["user"]]=="fabio" | Sys.info()[["user"]]=="favoo"){
# if(F){
  # fin_spend <- readRDS("../data/fin_spend.  rds")
  spend_reports <- readRDS("../data/spend_reports.rds")
} else {
  full_cntry_list <- read_rds("https://github.com/favstats/meta_ad_reports/raw/main/cntry_list.rds") %>% 
  rename(iso2c = iso2,
         country = cntry) #%>% 
  # sample_n(n())  %>%
      # filter(iso2c %in% eu_countries) 

      out <- full_cntry_list$iso2c %>% 
        map(~{
          .x %>% 
            paste0(c("-last_30_days"))
        }) %>% 
        unlist() %>% 
        # keep(~str_detect(.x, tf)) %>% 
        # .[100:120] %>% 
        map_dfr_progress(~{
          the_assets <- httr::GET(paste0("https://github.com/favstats/meta_ad_targeting/releases/expanded_assets/", .x))
          
          the_assets %>% httr::content() %>% 
            rvest::html_elements(".Box-row") %>% 
            rvest::html_text()  %>%
            tibble(raw = .)   %>%
            # Split the raw column into separate lines
            mutate(raw = strsplit(as.character(raw), "\n")) %>%
            # Extract the relevant lines for filename, file size, and timestamp
            transmute(
              filename = sapply(raw, function(x) trimws(x[3])),
              file_size = sapply(raw, function(x) trimws(x[6])),
              timestamp = sapply(raw, function(x) trimws(x[7]))
            ) %>% 
            filter(filename != "Source code") %>% 
            mutate(release = .x) %>% 
            mutate_all(as.character)
        })
      
      thosearethere30 <- out %>% 
        rename(tag = release,
               file_name = filename)  %>% 
        arrange(desc(tag)) %>% 
        separate(tag, into = c("cntry", "tframe"), remove = F, sep = "-") %>%
        # filter(cntry == sets$cntry) %>% 
        mutate(ds  = str_remove(file_name, "\\.rds|\\.zip|\\.parquet")) %>% 
        distinct(cntry, ds, tframe) %>% 
        drop_na(ds) %>% 
        arrange(desc(ds)) %>% 
        group_by(cntry) %>% 
        slice(1) %>% 
        ungroup()
      
      out <- full_cntry_list$iso2c %>% 
        map(~{
          .x %>% 
            paste0(c("-last_7_days"))
        }) %>% 
        unlist() %>% 
        # keep(~str_detect(.x, tf)) %>% 
        # .[100:120] %>% 
        map_dfr_progress(~{
          the_assets <- httr::GET(paste0("https://github.com/favstats/meta_ad_targeting/releases/expanded_assets/", .x))
          
          the_assets %>% httr::content() %>% 
            rvest::html_elements(".Box-row") %>% 
            rvest::html_text()  %>%
            tibble(raw = .)   %>%
            # Split the raw column into separate lines
            mutate(raw = strsplit(as.character(raw), "\n")) %>%
            # Extract the relevant lines for filename, file size, and timestamp
            transmute(
              filename = sapply(raw, function(x) trimws(x[3])),
              file_size = sapply(raw, function(x) trimws(x[6])),
              timestamp = sapply(raw, function(x) trimws(x[7]))
            ) %>% 
            filter(filename != "Source code") %>% 
            mutate(release = .x) %>% 
            mutate_all(as.character)
        })
      
      thosearethere7 <- out %>% 
        rename(tag = release,
               file_name = filename)  %>% 
        arrange(desc(tag)) %>% 
        separate(tag, into = c("cntry", "tframe"), remove = F, sep = "-") %>%
        # filter(cntry == sets$cntry) %>% 
        mutate(ds  = str_remove(file_name, "\\.rds|\\.zip|\\.parquet")) %>% 
        distinct(cntry, ds, tframe) %>% 
        drop_na(ds) %>% 
        arrange(desc(ds)) %>% 
        group_by(cntry) %>% 
        slice(1) %>% 
        ungroup()
      
          # counter <- 1
      
          
  conversios <- jsonlite::fromJSON(paste0("https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@",thosearethere30$ds[1] ,"/v1/currencies/usd.json")) %>% 
  pluck("usd") %>% 
  enframe() %>% 
  unnest(value) %>% 
  distinct(name, .keep_all = T) %>% 
  mutate(main_currency = str_to_upper(name)) %>% 
  filter(str_count(main_currency)==3) %>% 
  mutate(conversion_rate = value) %>% 
  select(-name, -value)
    
  # thosearethere7 %>% 
  #   slice(74)
      
    thosearethere7 %>%
      # filter(cntry %in% eu_countries) %>% 
        split(1:nrow(.)) %>% 
        walk(~{
          # print()
          try({
          elex <-
            arrow::read_parquet(
              paste0(
                "https://github.com/favstats/meta_ad_targeting/releases/download/",
                .x$cntry,
                "-last_",
                7,
                "_days/",
                .x$ds,
                ".parquet"
              )
            )  %>%
            mutate(cntry = .x$cntry) %>%
            filter(is.na(no_data))  %>%
            left_join(conversios) %>%
            mutate(total_spend_formatted = ifelse(total_spend_formatted == 100, 1, total_spend_formatted)) %>%
            mutate(dollar_spend = total_spend_formatted / conversion_rate)
          
          saveRDS(elex, glue::glue("../data/7/{.x$cntry}.rds"))            
          })

          
          
        }, .progress = T)
    
    spendd <- thosearethere30 %>%
      # filter(cntry %in% eu_countries) %>% 
        split(1:nrow(.)) %>% 
        walk_progress(~{
          # print()
          try({
            
          elex <-
            arrow::read_parquet(
              paste0(
                "https://github.com/favstats/meta_ad_targeting/releases/download/",
                .x$cntry,
                "-last_",
                30,
                "_days/",
                .x$ds,
                ".parquet"
              )
            )  %>%
            mutate(cntry = .x$cntry) %>%
            filter(is.na(no_data))  %>%
            left_join(conversios) %>%
            mutate(total_spend_formatted = ifelse(total_spend_formatted == 100, 1, total_spend_formatted)) %>%
            mutate(dollar_spend = total_spend_formatted / conversion_rate)
          
          saveRDS(elex, glue::glue("../data/30/{.x$cntry}.rds"))
          
          })
          
        }, .progress = T)
    


    
    options(scipen = 999)
    
 # fin_spend <- spendd %>% 
 #    select(cntry, dollar_spend, main_currency, total_spend_formatted,
 #           total_num_ads,conversion_rate, ds) %>% 
 #   group_by(cntry) %>% 
 #   summarise(dollar_spend = sum(dollar_spend),
 #             total_num_ads = sum(total_num_ads)) %>% 
 #   ungroup() %>% 
 #   mutate(url = glue::glue("https://favstats.github.io/elex/{cntry}")) #%>% 
 #   # mutate(dollar_spend = log(dollar_spend)) 
 #   
 #  # fin_spend %>% 
 #  #   filter(cntry == "ID")
 # 
 # saveRDS(fin_spend, "../data/fin_spend.rds")
 
 # saveRDS(spendd, "../data/election_dat30.rds")
 
 
           out <- full_cntry_list$iso2c %>% 
        map(~{
          .x %>% 
            paste0(c("-last_30_days"))
        }) %>% 
        unlist() %>% 
        # keep(~str_detect(.x, tf)) %>% 
        # .[100:120] %>% 
        map_dfr_progress(~{
          the_assets <- httr::GET(paste0("https://github.com/favstats/meta_ad_reports/releases/expanded_assets/", .x))
          
          the_assets %>% httr::content() %>% 
            rvest::html_elements(".Box-row") %>% 
            rvest::html_text()  %>%
            tibble(raw = .)   %>%
            # Split the raw column into separate lines
            mutate(raw = strsplit(as.character(raw), "\n")) %>%
            # Extract the relevant lines for filename, file size, and timestamp
            transmute(
              filename = sapply(raw, function(x) trimws(x[3])),
              file_size = sapply(raw, function(x) trimws(x[6])),
              timestamp = sapply(raw, function(x) trimws(x[7]))
            ) %>% 
            filter(filename != "Source code") %>% 
            mutate(release = .x) %>% 
            mutate_all(as.character)
        })
 
      thosearethere30_reports <- out %>% 
        rename(tag = release,
               file_name = filename)  %>% 
        arrange(desc(tag)) %>% 
        separate(tag, into = c("cntry", "tframe"), remove = F, sep = "-") %>%
        # filter(cntry == sets$cntry) %>% 
        mutate(ds  = str_remove(file_name, "\\.rds|\\.zip|\\.parquet")) %>% 
        distinct(cntry, ds, tframe) %>% 
        drop_na(ds) %>% 
        arrange(desc(ds)) %>% 
        group_by(cntry) %>% 
        slice(2) %>% 
        ungroup()

          
    spend_reports <- thosearethere30_reports %>%
      # filter(cntry %in% eu_countries) %>% 
        split(1:nrow(.)) %>% 
        map_dfr_progress(~{
          # print()
 
          elex <<-
            download_it(
              paste0(
                "https://github.com/favstats/meta_ad_reports/releases/download/",
                .x$cntry,
                # "DE",
                "-last_",
                30,
                "_days/",
                .x$ds,
                # "2024-05-30",
                ".rds"
              )
            )  %>%
            mutate(cntry = .x$cntry)
          
          # print("hello")
          thecurrent <- elex %>% 
  select(contains("amount_spent")) %>% 
  names() %>% 
  str_remove_all("amount_spent_") %>% 
  str_to_upper()
  # print("heee")
elex <- elex %>% 
rename_at(vars(contains("amount_spent")), function(.x) return("amount_spent")) %>% 
  # select(contains("amount_spent")) %>% 
    mutate(main_currency = thecurrent) %>% 
            left_join(conversios) %>%
  mutate(amount_spent = readr::parse_number(amount_spent)) %>% 
            mutate(amount_spent = ifelse(amount_spent == 100, 1, amount_spent)) %>%
            mutate(dollar_spend = amount_spent / conversion_rate) %>% 
  group_by(page_id, cntry) %>%
  summarize(dollar_spend = sum(dollar_spend, na.rm = T)) %>% 
  ungroup() %>% 
  mutate_all(as.character) 
          
          # saveRDS(elex, glue::glue("../data/30/{.x$cntry}.rds"))
          
          return(elex)
          
        }, .progress = T) %>% 
      mutate(dollar_spend = as.numeric(dollar_spend))
 
    
    saveRDS(spend_reports, "../data/spend_reports.rds")
    
}
```

```{r, eval = F}
spend_reports %>% 
  group_by(cntry) %>% 
  summarize(dollar_spend = sum(dollar_spend)) %>% 
  arrange(desc(dollar_spend))
  # count(cntry, sort  = T)
```


```{r cars2, echo = F, message=F, warning=F}
# library(WDI)
# thepop <- WDI::WDI(indicator = "SP.POP.TOTL",latest = 1, country = full_cntry_list$iso2c)
# saveRDS(thepop, file = "../data/totpop.rds")
totpop <- readRDS("../data/totpop.rds")

ncavc <- spend_reports %>% 
  group_by(cntry) %>% 
  summarize(dollar_spend = sum(dollar_spend)) %>% 
  arrange(desc(dollar_spend)) %>% 
  left_join(
    totpop %>% 
  filter(year == 2022) %>% 
    rename(cntry = iso2c)
  )  %>% 
  mutate(spn_per_capita = dollar_spend/SP.POP.TOTL*1000) %>% 
  # filter(cntry %in% eu_countries) %>% 
  mutate(perc = dollar_spend/sum(dollar_spend)*100) %>% 
  mutate(perc = round(perc,2)) #%>% 
   # mutate(dollar_spend = log(dollar_spend))
   
# ncavc %>% 
#   arrange(desc(spn_per_capita))


options(scipen = 999)
# fin_spend <- fin_spend %>%
#   mutate(perc = exp(dollar_spend)/sum(exp(dollar_spend))*100) %>% 
#   arrange(desc(perc)) %>% 
#   mutate(perc = round(perc,2))

# spend_reports %>% 
#   arrange(desc(dollar_spend))


```






```{r}
# if(Sys.info()[["user"]]=="fabio" | Sys.info()[["user"]]=="favoo"){
# election_dat30 <- readRDS("../data/election_dat30.rds") 
# }  else {
# election_dat30 <- dir("../data/30", full.names = T) %>% 
#   map_dfr(readRDS)  %>%
#   rename(internal_id = page_id)
# 
# saveRDS(election_dat30,file = "../data/election_dat30.rds")
# 
# election_dat7 <- dir("../data/7", full.names = T) %>% 
#   map_dfr(readRDS)  %>%
#   rename(internal_id = page_id)
# 
# saveRDS(election_dat7,file = "../data/election_dat7.rds")  
# }


# election_dat30 %>% 
# as_tibble() %>% 
# select(-party) %>% 
#   left_join(wtm_labs_fin %>% select(internal_id, party, national_party = entities.short_name)) %>% 
#   mutate(party = ifelse(is.na(party), "-", party)) %>% 
#   mutate(national_party = ifelse(party == "-", "-", national_party)) %>% 
#   filter(cntry == "IT") %>% 
#   arrange(desc(dollar_spend)) %>% 
#   distinct(internal_id, .keep_all = T)
#   count(cntry, sort = T)
```




```{r, echo = F, message=F, warning=F}
# Load the world Map data
data(worldgeojson, package = "highcharter")

# fin_spend %>% 
#   mutate(country = countryc)

# worldgeojson
# 
# color_stops <- data.frame(
#   value = c(0, 0.25, 0.5, 0.75, 1), # Normalized positions of your log points on the color axis
#   color = c('#ffffb2', '#fecc5c', '#fd8d3c', '#f03b20', '#bd0026') # Example colors
# )

highchart() %>%
  hc_add_series_map(
    worldgeojson,
    ncavc %>% mutate(spn_per_capita = log(spn_per_capita)),
    value = "spn_per_capita",
    joinBy = c('iso2', 'cntry'),
    name = "LifeExpectancy"
  )  %>%
  # hc_colorAxis(stops = color_stops()) %>%
  hc_tooltip(
    formatter = JS(
      "function () {
    return '<b>' + this.point.name + '</b>: <br><i>$' + new Intl.NumberFormat('fr-FR').format(Math.exp(this.point.value).toFixed(0)) + ' </i> per 1000 inhabitants<br><i>$' + new Intl.NumberFormat('fr-FR').format(this.point.dollar_spend.toFixed(0)) + '</i> total spent in last 30 days (' + this.point.perc + '%)';
  }"
    )
  ) %>%
  hc_mapNavigation(enabled = TRUE) %>%
  hc_title(text = "Click on Any Country to See More") %>%
  hc_legend(enabled = F) %>%
  hc_colorAxis(
    # type = 'logarithmic',
    # stops = color_stops(),
    minColor = "lightblue",
    maxColor = "darkgreen"
  ) %>%
  hc_plotOptions(series = list(events = list(
    click = JS(
      "function(event) {
                     var cntry = event.point.name;
                     console.log('Country clicked:', cntry);
                     document.querySelectorAll('.party-content').forEach(function(el) {
                       el.style.display = 'none';
                     });
                     var partyElement = document.getElementById(cntry);
                     if (partyElement) {
                       partyElement.style.display = 'block';
                     } else {
                       console.error('Country element with ID ' + cntry + ' not found');
                     }
                   }"
    )
  ))) %>%
  hc_legend(enabled = F)
```



<center>

Data shows spending per 1k inhabitants from last 30 days (`r last30days_string`)

</center>



```{r, echo = F, warning = F, message=F, eval = F}
shiny::HTML('<div class="button-container">
    <button class="show-data-btn" onclick="changeParentIframeURL()">Show all data</button>
</div>')

```
















